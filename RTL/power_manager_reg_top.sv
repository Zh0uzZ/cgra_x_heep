// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module power_manager_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output power_manager_reg_pkg::power_manager_reg2hw_t reg2hw, // Write
  input  power_manager_reg_pkg::power_manager_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import power_manager_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic wakeup_state_qs;
  logic wakeup_state_wd;
  logic wakeup_state_we;
  logic [31:0] restore_address_qs;
  logic [31:0] restore_address_wd;
  logic restore_address_we;
  logic [31:0] en_wait_for_intr_qs;
  logic [31:0] en_wait_for_intr_wd;
  logic en_wait_for_intr_we;
  logic [31:0] intr_state_qs;
  logic [31:0] intr_state_wd;
  logic intr_state_we;
  logic power_gate_core_qs;
  logic power_gate_core_wd;
  logic power_gate_core_we;
  logic power_gate_core_ack_qs;
  logic [31:0] cpu_reset_assert_counter_qs;
  logic [31:0] cpu_reset_assert_counter_wd;
  logic cpu_reset_assert_counter_we;
  logic [31:0] cpu_reset_deassert_counter_qs;
  logic [31:0] cpu_reset_deassert_counter_wd;
  logic cpu_reset_deassert_counter_we;
  logic [31:0] cpu_switch_off_counter_qs;
  logic [31:0] cpu_switch_off_counter_wd;
  logic cpu_switch_off_counter_we;
  logic [31:0] cpu_switch_on_counter_qs;
  logic [31:0] cpu_switch_on_counter_wd;
  logic cpu_switch_on_counter_we;
  logic cpu_wait_ack_switch_on_counter_qs;
  logic cpu_wait_ack_switch_on_counter_wd;
  logic cpu_wait_ack_switch_on_counter_we;
  logic [31:0] cpu_iso_off_counter_qs;
  logic [31:0] cpu_iso_off_counter_wd;
  logic cpu_iso_off_counter_we;
  logic [31:0] cpu_iso_on_counter_qs;
  logic [31:0] cpu_iso_on_counter_wd;
  logic cpu_iso_on_counter_we;
  logic cpu_counters_stop_cpu_reset_assert_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_reset_assert_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_reset_assert_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_switch_off_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_switch_off_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_switch_off_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_switch_on_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_switch_on_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_switch_on_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_iso_off_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_iso_off_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_iso_off_stop_bit_counter_we;
  logic cpu_counters_stop_cpu_iso_on_stop_bit_counter_qs;
  logic cpu_counters_stop_cpu_iso_on_stop_bit_counter_wd;
  logic cpu_counters_stop_cpu_iso_on_stop_bit_counter_we;
  logic power_gate_periph_ack_qs;
  logic periph_reset_qs;
  logic periph_reset_wd;
  logic periph_reset_we;
  logic periph_switch_qs;
  logic periph_switch_wd;
  logic periph_switch_we;
  logic periph_wait_ack_switch_on_qs;
  logic periph_wait_ack_switch_on_wd;
  logic periph_wait_ack_switch_on_we;
  logic periph_iso_qs;
  logic periph_iso_wd;
  logic periph_iso_we;
  logic power_gate_ram_block_0_ack_qs;
  logic ram_0_switch_qs;
  logic ram_0_switch_wd;
  logic ram_0_switch_we;
  logic ram_0_wait_ack_switch_on_qs;
  logic ram_0_wait_ack_switch_on_wd;
  logic ram_0_wait_ack_switch_on_we;
  logic ram_0_iso_qs;
  logic ram_0_iso_wd;
  logic ram_0_iso_we;
  logic ram_0_retentive_qs;
  logic ram_0_retentive_wd;
  logic ram_0_retentive_we;
  logic power_gate_ram_block_1_ack_qs;
  logic ram_1_switch_qs;
  logic ram_1_switch_wd;
  logic ram_1_switch_we;
  logic ram_1_wait_ack_switch_on_qs;
  logic ram_1_wait_ack_switch_on_wd;
  logic ram_1_wait_ack_switch_on_we;
  logic ram_1_iso_qs;
  logic ram_1_iso_wd;
  logic ram_1_iso_we;
  logic ram_1_retentive_qs;
  logic ram_1_retentive_wd;
  logic ram_1_retentive_we;
  logic [2:0] monitor_power_gate_core_qs;
  logic [2:0] monitor_power_gate_periph_qs;
  logic [1:0] monitor_power_gate_ram_block_0_qs;
  logic [1:0] monitor_power_gate_ram_block_1_qs;
  logic master_cpu_force_switch_off_qs;
  logic master_cpu_force_switch_off_wd;
  logic master_cpu_force_switch_off_we;
  logic master_cpu_force_switch_on_qs;
  logic master_cpu_force_switch_on_wd;
  logic master_cpu_force_switch_on_we;
  logic master_cpu_force_reset_assert_qs;
  logic master_cpu_force_reset_assert_wd;
  logic master_cpu_force_reset_assert_we;
  logic master_cpu_force_reset_deassert_qs;
  logic master_cpu_force_reset_deassert_wd;
  logic master_cpu_force_reset_deassert_we;
  logic master_cpu_force_iso_off_qs;
  logic master_cpu_force_iso_off_wd;
  logic master_cpu_force_iso_off_we;
  logic master_cpu_force_iso_on_qs;
  logic master_cpu_force_iso_on_wd;
  logic master_cpu_force_iso_on_we;

  // Register instances
  // R[wakeup_state]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_wakeup_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (wakeup_state_we),
    .wd     (wakeup_state_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wakeup_state.q ),

    // to register interface (read)
    .qs     (wakeup_state_qs)
  );


  // R[restore_address]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_restore_address (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (restore_address_we),
    .wd     (restore_address_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.restore_address.q ),

    // to register interface (read)
    .qs     (restore_address_qs)
  );


  // R[en_wait_for_intr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_en_wait_for_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (en_wait_for_intr_we),
    .wd     (en_wait_for_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.en_wait_for_intr.q ),

    // to register interface (read)
    .qs     (en_wait_for_intr_qs)
  );


  // R[intr_state]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_intr_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.de),
    .d      (hw2reg.intr_state.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.q ),

    // to register interface (read)
    .qs     (intr_state_qs)
  );


  // R[power_gate_core]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_power_gate_core (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (power_gate_core_we),
    .wd     (power_gate_core_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.power_gate_core.q ),

    // to register interface (read)
    .qs     (power_gate_core_qs)
  );


  // R[power_gate_core_ack]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_power_gate_core_ack (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.power_gate_core_ack.de),
    .d      (hw2reg.power_gate_core_ack.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.power_gate_core_ack.q ),

    // to register interface (read)
    .qs     (power_gate_core_ack_qs)
  );


  // R[cpu_reset_assert_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_reset_assert_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_reset_assert_counter_we),
    .wd     (cpu_reset_assert_counter_wd),

    // from internal hardware
    .de     (hw2reg.cpu_reset_assert_counter.de),
    .d      (hw2reg.cpu_reset_assert_counter.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_reset_assert_counter.q ),

    // to register interface (read)
    .qs     (cpu_reset_assert_counter_qs)
  );


  // R[cpu_reset_deassert_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_reset_deassert_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_reset_deassert_counter_we),
    .wd     (cpu_reset_deassert_counter_wd),

    // from internal hardware
    .de     (hw2reg.cpu_reset_deassert_counter.de),
    .d      (hw2reg.cpu_reset_deassert_counter.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_reset_deassert_counter.q ),

    // to register interface (read)
    .qs     (cpu_reset_deassert_counter_qs)
  );


  // R[cpu_switch_off_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_switch_off_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_switch_off_counter_we),
    .wd     (cpu_switch_off_counter_wd),

    // from internal hardware
    .de     (hw2reg.cpu_switch_off_counter.de),
    .d      (hw2reg.cpu_switch_off_counter.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_switch_off_counter.q ),

    // to register interface (read)
    .qs     (cpu_switch_off_counter_qs)
  );


  // R[cpu_switch_on_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_switch_on_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_switch_on_counter_we),
    .wd     (cpu_switch_on_counter_wd),

    // from internal hardware
    .de     (hw2reg.cpu_switch_on_counter.de),
    .d      (hw2reg.cpu_switch_on_counter.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_switch_on_counter.q ),

    // to register interface (read)
    .qs     (cpu_switch_on_counter_qs)
  );


  // R[cpu_wait_ack_switch_on_counter]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_wait_ack_switch_on_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_wait_ack_switch_on_counter_we),
    .wd     (cpu_wait_ack_switch_on_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_wait_ack_switch_on_counter.q ),

    // to register interface (read)
    .qs     (cpu_wait_ack_switch_on_counter_qs)
  );


  // R[cpu_iso_off_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_iso_off_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_iso_off_counter_we),
    .wd     (cpu_iso_off_counter_wd),

    // from internal hardware
    .de     (hw2reg.cpu_iso_off_counter.de),
    .d      (hw2reg.cpu_iso_off_counter.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_iso_off_counter.q ),

    // to register interface (read)
    .qs     (cpu_iso_off_counter_qs)
  );


  // R[cpu_iso_on_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_iso_on_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_iso_on_counter_we),
    .wd     (cpu_iso_on_counter_wd),

    // from internal hardware
    .de     (hw2reg.cpu_iso_on_counter.de),
    .d      (hw2reg.cpu_iso_on_counter.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_iso_on_counter.q ),

    // to register interface (read)
    .qs     (cpu_iso_on_counter_qs)
  );


  // R[cpu_counters_stop]: V(False)

  //   F[cpu_reset_assert_stop_bit_counter]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_reset_assert_stop_bit_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_counters_stop_cpu_reset_assert_stop_bit_counter_we),
    .wd     (cpu_counters_stop_cpu_reset_assert_stop_bit_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_counters_stop.cpu_reset_assert_stop_bit_counter.q ),

    // to register interface (read)
    .qs     (cpu_counters_stop_cpu_reset_assert_stop_bit_counter_qs)
  );


  //   F[cpu_reset_deassert_stop_bit_counter]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_reset_deassert_stop_bit_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_we),
    .wd     (cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_counters_stop.cpu_reset_deassert_stop_bit_counter.q ),

    // to register interface (read)
    .qs     (cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_qs)
  );


  //   F[cpu_switch_off_stop_bit_counter]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_switch_off_stop_bit_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_counters_stop_cpu_switch_off_stop_bit_counter_we),
    .wd     (cpu_counters_stop_cpu_switch_off_stop_bit_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_counters_stop.cpu_switch_off_stop_bit_counter.q ),

    // to register interface (read)
    .qs     (cpu_counters_stop_cpu_switch_off_stop_bit_counter_qs)
  );


  //   F[cpu_switch_on_stop_bit_counter]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_switch_on_stop_bit_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_counters_stop_cpu_switch_on_stop_bit_counter_we),
    .wd     (cpu_counters_stop_cpu_switch_on_stop_bit_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_counters_stop.cpu_switch_on_stop_bit_counter.q ),

    // to register interface (read)
    .qs     (cpu_counters_stop_cpu_switch_on_stop_bit_counter_qs)
  );


  //   F[cpu_iso_off_stop_bit_counter]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_iso_off_stop_bit_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_counters_stop_cpu_iso_off_stop_bit_counter_we),
    .wd     (cpu_counters_stop_cpu_iso_off_stop_bit_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_counters_stop.cpu_iso_off_stop_bit_counter.q ),

    // to register interface (read)
    .qs     (cpu_counters_stop_cpu_iso_off_stop_bit_counter_qs)
  );


  //   F[cpu_iso_on_stop_bit_counter]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_counters_stop_cpu_iso_on_stop_bit_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_counters_stop_cpu_iso_on_stop_bit_counter_we),
    .wd     (cpu_counters_stop_cpu_iso_on_stop_bit_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_counters_stop.cpu_iso_on_stop_bit_counter.q ),

    // to register interface (read)
    .qs     (cpu_counters_stop_cpu_iso_on_stop_bit_counter_qs)
  );


  // R[power_gate_periph_ack]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_power_gate_periph_ack (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.power_gate_periph_ack.de),
    .d      (hw2reg.power_gate_periph_ack.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.power_gate_periph_ack.q ),

    // to register interface (read)
    .qs     (power_gate_periph_ack_qs)
  );


  // R[periph_reset]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_reset (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_reset_we),
    .wd     (periph_reset_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_reset.q ),

    // to register interface (read)
    .qs     (periph_reset_qs)
  );


  // R[periph_switch]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_switch (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_switch_we),
    .wd     (periph_switch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_switch.q ),

    // to register interface (read)
    .qs     (periph_switch_qs)
  );


  // R[periph_wait_ack_switch_on]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_wait_ack_switch_on (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_wait_ack_switch_on_we),
    .wd     (periph_wait_ack_switch_on_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_wait_ack_switch_on.q ),

    // to register interface (read)
    .qs     (periph_wait_ack_switch_on_qs)
  );


  // R[periph_iso]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_iso (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_iso_we),
    .wd     (periph_iso_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_iso.q ),

    // to register interface (read)
    .qs     (periph_iso_qs)
  );


  // R[power_gate_ram_block_0_ack]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_power_gate_ram_block_0_ack (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.power_gate_ram_block_0_ack.de),
    .d      (hw2reg.power_gate_ram_block_0_ack.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.power_gate_ram_block_0_ack.q ),

    // to register interface (read)
    .qs     (power_gate_ram_block_0_ack_qs)
  );


  // R[ram_0_switch]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ram_0_switch (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ram_0_switch_we),
    .wd     (ram_0_switch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ram_0_switch.q ),

    // to register interface (read)
    .qs     (ram_0_switch_qs)
  );


  // R[ram_0_wait_ack_switch_on]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ram_0_wait_ack_switch_on (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ram_0_wait_ack_switch_on_we),
    .wd     (ram_0_wait_ack_switch_on_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ram_0_wait_ack_switch_on.q ),

    // to register interface (read)
    .qs     (ram_0_wait_ack_switch_on_qs)
  );


  // R[ram_0_iso]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ram_0_iso (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ram_0_iso_we),
    .wd     (ram_0_iso_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ram_0_iso.q ),

    // to register interface (read)
    .qs     (ram_0_iso_qs)
  );


  // R[ram_0_retentive]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ram_0_retentive (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ram_0_retentive_we),
    .wd     (ram_0_retentive_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ram_0_retentive.q ),

    // to register interface (read)
    .qs     (ram_0_retentive_qs)
  );


  // R[power_gate_ram_block_1_ack]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_power_gate_ram_block_1_ack (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.power_gate_ram_block_1_ack.de),
    .d      (hw2reg.power_gate_ram_block_1_ack.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.power_gate_ram_block_1_ack.q ),

    // to register interface (read)
    .qs     (power_gate_ram_block_1_ack_qs)
  );


  // R[ram_1_switch]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ram_1_switch (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ram_1_switch_we),
    .wd     (ram_1_switch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ram_1_switch.q ),

    // to register interface (read)
    .qs     (ram_1_switch_qs)
  );


  // R[ram_1_wait_ack_switch_on]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ram_1_wait_ack_switch_on (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ram_1_wait_ack_switch_on_we),
    .wd     (ram_1_wait_ack_switch_on_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ram_1_wait_ack_switch_on.q ),

    // to register interface (read)
    .qs     (ram_1_wait_ack_switch_on_qs)
  );


  // R[ram_1_iso]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ram_1_iso (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ram_1_iso_we),
    .wd     (ram_1_iso_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ram_1_iso.q ),

    // to register interface (read)
    .qs     (ram_1_iso_qs)
  );


  // R[ram_1_retentive]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ram_1_retentive (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ram_1_retentive_we),
    .wd     (ram_1_retentive_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ram_1_retentive.q ),

    // to register interface (read)
    .qs     (ram_1_retentive_qs)
  );


  // R[monitor_power_gate_core]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_monitor_power_gate_core (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.monitor_power_gate_core.de),
    .d      (hw2reg.monitor_power_gate_core.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (monitor_power_gate_core_qs)
  );


  // R[monitor_power_gate_periph]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_monitor_power_gate_periph (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.monitor_power_gate_periph.de),
    .d      (hw2reg.monitor_power_gate_periph.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (monitor_power_gate_periph_qs)
  );


  // R[monitor_power_gate_ram_block_0]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RO"),
    .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.monitor_power_gate_ram_block_0.de),
    .d      (hw2reg.monitor_power_gate_ram_block_0.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (monitor_power_gate_ram_block_0_qs)
  );


  // R[monitor_power_gate_ram_block_1]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RO"),
    .RESVAL  (2'h0)
  ) u_monitor_power_gate_ram_block_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.monitor_power_gate_ram_block_1.de),
    .d      (hw2reg.monitor_power_gate_ram_block_1.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (monitor_power_gate_ram_block_1_qs)
  );


  // R[master_cpu_force_switch_off]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_master_cpu_force_switch_off (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (master_cpu_force_switch_off_we),
    .wd     (master_cpu_force_switch_off_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.master_cpu_force_switch_off.q ),

    // to register interface (read)
    .qs     (master_cpu_force_switch_off_qs)
  );


  // R[master_cpu_force_switch_on]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_master_cpu_force_switch_on (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (master_cpu_force_switch_on_we),
    .wd     (master_cpu_force_switch_on_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.master_cpu_force_switch_on.q ),

    // to register interface (read)
    .qs     (master_cpu_force_switch_on_qs)
  );


  // R[master_cpu_force_reset_assert]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_master_cpu_force_reset_assert (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (master_cpu_force_reset_assert_we),
    .wd     (master_cpu_force_reset_assert_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.master_cpu_force_reset_assert.q ),

    // to register interface (read)
    .qs     (master_cpu_force_reset_assert_qs)
  );


  // R[master_cpu_force_reset_deassert]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_master_cpu_force_reset_deassert (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (master_cpu_force_reset_deassert_we),
    .wd     (master_cpu_force_reset_deassert_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.master_cpu_force_reset_deassert.q ),

    // to register interface (read)
    .qs     (master_cpu_force_reset_deassert_qs)
  );


  // R[master_cpu_force_iso_off]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_master_cpu_force_iso_off (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (master_cpu_force_iso_off_we),
    .wd     (master_cpu_force_iso_off_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.master_cpu_force_iso_off.q ),

    // to register interface (read)
    .qs     (master_cpu_force_iso_off_qs)
  );


  // R[master_cpu_force_iso_on]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_master_cpu_force_iso_on (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (master_cpu_force_iso_on_we),
    .wd     (master_cpu_force_iso_on_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.master_cpu_force_iso_on.q ),

    // to register interface (read)
    .qs     (master_cpu_force_iso_on_qs)
  );




  logic [38:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == POWER_MANAGER_WAKEUP_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == POWER_MANAGER_RESTORE_ADDRESS_OFFSET);
    addr_hit[ 2] = (reg_addr == POWER_MANAGER_EN_WAIT_FOR_INTR_OFFSET);
    addr_hit[ 3] = (reg_addr == POWER_MANAGER_INTR_STATE_OFFSET);
    addr_hit[ 4] = (reg_addr == POWER_MANAGER_POWER_GATE_CORE_OFFSET);
    addr_hit[ 5] = (reg_addr == POWER_MANAGER_POWER_GATE_CORE_ACK_OFFSET);
    addr_hit[ 6] = (reg_addr == POWER_MANAGER_CPU_RESET_ASSERT_COUNTER_OFFSET);
    addr_hit[ 7] = (reg_addr == POWER_MANAGER_CPU_RESET_DEASSERT_COUNTER_OFFSET);
    addr_hit[ 8] = (reg_addr == POWER_MANAGER_CPU_SWITCH_OFF_COUNTER_OFFSET);
    addr_hit[ 9] = (reg_addr == POWER_MANAGER_CPU_SWITCH_ON_COUNTER_OFFSET);
    addr_hit[10] = (reg_addr == POWER_MANAGER_CPU_WAIT_ACK_SWITCH_ON_COUNTER_OFFSET);
    addr_hit[11] = (reg_addr == POWER_MANAGER_CPU_ISO_OFF_COUNTER_OFFSET);
    addr_hit[12] = (reg_addr == POWER_MANAGER_CPU_ISO_ON_COUNTER_OFFSET);
    addr_hit[13] = (reg_addr == POWER_MANAGER_CPU_COUNTERS_STOP_OFFSET);
    addr_hit[14] = (reg_addr == POWER_MANAGER_POWER_GATE_PERIPH_ACK_OFFSET);
    addr_hit[15] = (reg_addr == POWER_MANAGER_PERIPH_RESET_OFFSET);
    addr_hit[16] = (reg_addr == POWER_MANAGER_PERIPH_SWITCH_OFFSET);
    addr_hit[17] = (reg_addr == POWER_MANAGER_PERIPH_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[18] = (reg_addr == POWER_MANAGER_PERIPH_ISO_OFFSET);
    addr_hit[19] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_0_ACK_OFFSET);
    addr_hit[20] = (reg_addr == POWER_MANAGER_RAM_0_SWITCH_OFFSET);
    addr_hit[21] = (reg_addr == POWER_MANAGER_RAM_0_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[22] = (reg_addr == POWER_MANAGER_RAM_0_ISO_OFFSET);
    addr_hit[23] = (reg_addr == POWER_MANAGER_RAM_0_RETENTIVE_OFFSET);
    addr_hit[24] = (reg_addr == POWER_MANAGER_POWER_GATE_RAM_BLOCK_1_ACK_OFFSET);
    addr_hit[25] = (reg_addr == POWER_MANAGER_RAM_1_SWITCH_OFFSET);
    addr_hit[26] = (reg_addr == POWER_MANAGER_RAM_1_WAIT_ACK_SWITCH_ON_OFFSET);
    addr_hit[27] = (reg_addr == POWER_MANAGER_RAM_1_ISO_OFFSET);
    addr_hit[28] = (reg_addr == POWER_MANAGER_RAM_1_RETENTIVE_OFFSET);
    addr_hit[29] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_CORE_OFFSET);
    addr_hit[30] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_PERIPH_OFFSET);
    addr_hit[31] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_0_OFFSET);
    addr_hit[32] = (reg_addr == POWER_MANAGER_MONITOR_POWER_GATE_RAM_BLOCK_1_OFFSET);
    addr_hit[33] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_SWITCH_OFF_OFFSET);
    addr_hit[34] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_SWITCH_ON_OFFSET);
    addr_hit[35] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_RESET_ASSERT_OFFSET);
    addr_hit[36] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_RESET_DEASSERT_OFFSET);
    addr_hit[37] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_ISO_OFF_OFFSET);
    addr_hit[38] = (reg_addr == POWER_MANAGER_MASTER_CPU_FORCE_ISO_ON_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(POWER_MANAGER_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(POWER_MANAGER_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(POWER_MANAGER_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(POWER_MANAGER_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(POWER_MANAGER_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(POWER_MANAGER_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(POWER_MANAGER_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(POWER_MANAGER_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(POWER_MANAGER_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(POWER_MANAGER_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(POWER_MANAGER_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(POWER_MANAGER_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(POWER_MANAGER_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(POWER_MANAGER_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(POWER_MANAGER_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(POWER_MANAGER_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(POWER_MANAGER_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(POWER_MANAGER_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(POWER_MANAGER_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(POWER_MANAGER_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(POWER_MANAGER_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(POWER_MANAGER_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(POWER_MANAGER_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(POWER_MANAGER_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(POWER_MANAGER_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(POWER_MANAGER_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(POWER_MANAGER_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(POWER_MANAGER_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(POWER_MANAGER_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(POWER_MANAGER_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(POWER_MANAGER_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(POWER_MANAGER_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(POWER_MANAGER_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(POWER_MANAGER_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(POWER_MANAGER_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(POWER_MANAGER_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(POWER_MANAGER_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(POWER_MANAGER_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(POWER_MANAGER_PERMIT[38] & ~reg_be)))));
  end

  assign wakeup_state_we = addr_hit[0] & reg_we & !reg_error;
  assign wakeup_state_wd = reg_wdata[0];

  assign restore_address_we = addr_hit[1] & reg_we & !reg_error;
  assign restore_address_wd = reg_wdata[31:0];

  assign en_wait_for_intr_we = addr_hit[2] & reg_we & !reg_error;
  assign en_wait_for_intr_wd = reg_wdata[31:0];

  assign intr_state_we = addr_hit[3] & reg_we & !reg_error;
  assign intr_state_wd = reg_wdata[31:0];

  assign power_gate_core_we = addr_hit[4] & reg_we & !reg_error;
  assign power_gate_core_wd = reg_wdata[0];

  assign cpu_reset_assert_counter_we = addr_hit[6] & reg_we & !reg_error;
  assign cpu_reset_assert_counter_wd = reg_wdata[31:0];

  assign cpu_reset_deassert_counter_we = addr_hit[7] & reg_we & !reg_error;
  assign cpu_reset_deassert_counter_wd = reg_wdata[31:0];

  assign cpu_switch_off_counter_we = addr_hit[8] & reg_we & !reg_error;
  assign cpu_switch_off_counter_wd = reg_wdata[31:0];

  assign cpu_switch_on_counter_we = addr_hit[9] & reg_we & !reg_error;
  assign cpu_switch_on_counter_wd = reg_wdata[31:0];

  assign cpu_wait_ack_switch_on_counter_we = addr_hit[10] & reg_we & !reg_error;
  assign cpu_wait_ack_switch_on_counter_wd = reg_wdata[0];

  assign cpu_iso_off_counter_we = addr_hit[11] & reg_we & !reg_error;
  assign cpu_iso_off_counter_wd = reg_wdata[31:0];

  assign cpu_iso_on_counter_we = addr_hit[12] & reg_we & !reg_error;
  assign cpu_iso_on_counter_wd = reg_wdata[31:0];

  assign cpu_counters_stop_cpu_reset_assert_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_reset_assert_stop_bit_counter_wd = reg_wdata[0];

  assign cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_wd = reg_wdata[1];

  assign cpu_counters_stop_cpu_switch_off_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_switch_off_stop_bit_counter_wd = reg_wdata[2];

  assign cpu_counters_stop_cpu_switch_on_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_switch_on_stop_bit_counter_wd = reg_wdata[3];

  assign cpu_counters_stop_cpu_iso_off_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_iso_off_stop_bit_counter_wd = reg_wdata[4];

  assign cpu_counters_stop_cpu_iso_on_stop_bit_counter_we = addr_hit[13] & reg_we & !reg_error;
  assign cpu_counters_stop_cpu_iso_on_stop_bit_counter_wd = reg_wdata[5];

  assign periph_reset_we = addr_hit[15] & reg_we & !reg_error;
  assign periph_reset_wd = reg_wdata[0];

  assign periph_switch_we = addr_hit[16] & reg_we & !reg_error;
  assign periph_switch_wd = reg_wdata[0];

  assign periph_wait_ack_switch_on_we = addr_hit[17] & reg_we & !reg_error;
  assign periph_wait_ack_switch_on_wd = reg_wdata[0];

  assign periph_iso_we = addr_hit[18] & reg_we & !reg_error;
  assign periph_iso_wd = reg_wdata[0];

  assign ram_0_switch_we = addr_hit[20] & reg_we & !reg_error;
  assign ram_0_switch_wd = reg_wdata[0];

  assign ram_0_wait_ack_switch_on_we = addr_hit[21] & reg_we & !reg_error;
  assign ram_0_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_0_iso_we = addr_hit[22] & reg_we & !reg_error;
  assign ram_0_iso_wd = reg_wdata[0];

  assign ram_0_retentive_we = addr_hit[23] & reg_we & !reg_error;
  assign ram_0_retentive_wd = reg_wdata[0];

  assign ram_1_switch_we = addr_hit[25] & reg_we & !reg_error;
  assign ram_1_switch_wd = reg_wdata[0];

  assign ram_1_wait_ack_switch_on_we = addr_hit[26] & reg_we & !reg_error;
  assign ram_1_wait_ack_switch_on_wd = reg_wdata[0];

  assign ram_1_iso_we = addr_hit[27] & reg_we & !reg_error;
  assign ram_1_iso_wd = reg_wdata[0];

  assign ram_1_retentive_we = addr_hit[28] & reg_we & !reg_error;
  assign ram_1_retentive_wd = reg_wdata[0];

  assign master_cpu_force_switch_off_we = addr_hit[33] & reg_we & !reg_error;
  assign master_cpu_force_switch_off_wd = reg_wdata[0];

  assign master_cpu_force_switch_on_we = addr_hit[34] & reg_we & !reg_error;
  assign master_cpu_force_switch_on_wd = reg_wdata[0];

  assign master_cpu_force_reset_assert_we = addr_hit[35] & reg_we & !reg_error;
  assign master_cpu_force_reset_assert_wd = reg_wdata[0];

  assign master_cpu_force_reset_deassert_we = addr_hit[36] & reg_we & !reg_error;
  assign master_cpu_force_reset_deassert_wd = reg_wdata[0];

  assign master_cpu_force_iso_off_we = addr_hit[37] & reg_we & !reg_error;
  assign master_cpu_force_iso_off_wd = reg_wdata[0];

  assign master_cpu_force_iso_on_we = addr_hit[38] & reg_we & !reg_error;
  assign master_cpu_force_iso_on_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = wakeup_state_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = restore_address_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = en_wait_for_intr_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = intr_state_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = power_gate_core_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = power_gate_core_ack_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = cpu_reset_assert_counter_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = cpu_reset_deassert_counter_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = cpu_switch_off_counter_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = cpu_switch_on_counter_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = cpu_wait_ack_switch_on_counter_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = cpu_iso_off_counter_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = cpu_iso_on_counter_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = cpu_counters_stop_cpu_reset_assert_stop_bit_counter_qs;
        reg_rdata_next[1] = cpu_counters_stop_cpu_reset_deassert_stop_bit_counter_qs;
        reg_rdata_next[2] = cpu_counters_stop_cpu_switch_off_stop_bit_counter_qs;
        reg_rdata_next[3] = cpu_counters_stop_cpu_switch_on_stop_bit_counter_qs;
        reg_rdata_next[4] = cpu_counters_stop_cpu_iso_off_stop_bit_counter_qs;
        reg_rdata_next[5] = cpu_counters_stop_cpu_iso_on_stop_bit_counter_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = power_gate_periph_ack_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = periph_reset_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = periph_switch_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = periph_wait_ack_switch_on_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = periph_iso_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = power_gate_ram_block_0_ack_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = ram_0_switch_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = ram_0_wait_ack_switch_on_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = ram_0_iso_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = ram_0_retentive_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = power_gate_ram_block_1_ack_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = ram_1_switch_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = ram_1_wait_ack_switch_on_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = ram_1_iso_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = ram_1_retentive_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[2:0] = monitor_power_gate_core_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[2:0] = monitor_power_gate_periph_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_0_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[1:0] = monitor_power_gate_ram_block_1_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = master_cpu_force_switch_off_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = master_cpu_force_switch_on_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = master_cpu_force_reset_assert_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = master_cpu_force_reset_deassert_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0] = master_cpu_force_iso_off_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = master_cpu_force_iso_on_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
